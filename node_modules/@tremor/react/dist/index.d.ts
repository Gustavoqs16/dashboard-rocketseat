/// <reference types="react" />
import React from 'react';
import { enUS } from 'date-fns/locale';

declare type ButtonType = "button" | "submit" | "reset";
declare type ValueFormatter = {
    (value: number): string;
};
declare const iconVariantValues: readonly ["simple", "light", "shadow", "solid", "outlined"];
declare type IconVariant = typeof iconVariantValues[number];
declare type HorizontalPosition = "left" | "right";
declare type VerticalPosition = "top" | "bottom";
declare type Importance = "primary" | "secondary";
declare type ButtonVariant = "primary" | "secondary" | "light";
declare type RelativeFilterOption = "tdy" | "w" | "t" | "m" | "y" | null;
declare const deltaTypeValues: readonly ["increase", "moderateIncrease", "decrease", "moderateDecrease", "unchanged"];
declare type DeltaType = typeof deltaTypeValues[number];
declare const sizeValues: readonly ["xs", "sm", "md", "lg", "xl"];
declare type Size = typeof sizeValues[number];
declare const baseColorValues: readonly ["slate", "gray", "zinc", "neutral", "stone", "red", "orange", "amber", "yellow", "lime", "green", "emerald", "teal", "cyan", "sky", "blue", "indigo", "violet", "purple", "fuchsia", "pink", "rose"];
declare type Color = typeof baseColorValues[number];
declare const twJustifyContentValues: readonly ["justify-start", "justify-end", "justify-center", "justify-between", "justify-around", "justify-evenly"];
declare type JustifyContent = typeof twJustifyContentValues[number];
declare const twAlignItemsValues: readonly ["items-start", "items-end", "items-center", "items-baseline", "items-stretch"];
declare type AlignItems = typeof twAlignItemsValues[number];
declare const twTextAlignmentValues: readonly ["text-left", "text-center", "text-right", "text-justify", "text-start", "text-end"];
declare type TextAlignment = typeof twTextAlignmentValues[number];
declare const twMaxWidthValues: readonly ["max-w-0", "max-w-none", "max-w-xs", "max-w-sm", "max-w-md", "max-w-lg", "max-w-xl", "max-w-2xl", "max-w-3xl", "max-w-4xl", "max-w-5xl", "max-w-6xl", "max-w-7xl", "max-w-full", "max-w-min", "max-w-max", "max-w-fit", "max-w-prose", "max-w-screen-sm", "max-w-screen-lg", "max-w-screen-xl", "max-w-screen-2xl"];
declare type MaxWidth = typeof twMaxWidthValues[number];
declare const twSpaceXValues: readonly ["space-x-0", "space-x-0.5", "space-x-1", "space-x-1.5", "space-x-2", "space-x-2.5", "space-x-3", "space-x-3.5", "space-x-4", "space-x-5", "space-x-6", "space-x-7", "space-x-8", "space-x-9", "space-x-10", "space-x-11", "space-x-12", "space-x-14", "space-x-16", "space-x-20", "space-x-24", "space-x-28", "space-x-32", "space-x-36", "space-x-40", "space-x-44", "space-x-48", "space-x-52", "space-x-56", "space-x-60", "space-x-64", "space-x-72", "space-x-80", "space-x-96", "-space-x-0.5", "-space-x-1", "-space-x-1.5", "-space-x-2", "-space-x-2.5", "-space-x-3", "-space-x-3.5", "-space-x-4", "-space-x-5", "-space-x-6", "-space-x-7", "-space-x-8", "-space-x-9", "-space-x-10", "-space-x-11", "-space-x-12", "-space-x-14", "-space-x-16", "-space-x-20", "-space-x-24", "-space-x-28", "-space-x-32", "-space-x-36", "-space-x-40", "-space-x-44", "-space-x-48", "-space-x-52", "-space-x-56", "-space-x-60", "-space-x-64", "-space-x-72", "-space-x-80", "-space-x-96"];
declare type SpaceX = typeof twSpaceXValues[number];
declare const twSpaceYValues: readonly ["space-y-0", "space-y-0.5", "space-y-1", "space-y-1.5", "space-y-2", "space-y-2.5", "space-y-3", "space-y-3.5", "space-y-4", "space-y-5", "space-y-6", "space-y-7", "space-y-8", "space-y-9", "space-y-10", "space-y-11", "space-y-12", "space-y-14", "space-y-16", "space-y-20", "space-y-24", "space-y-28", "space-y-32", "space-y-36", "space-y-40", "space-y-44", "space-y-48", "space-y-52", "space-y-56", "space-y-60", "space-y-64", "space-y-72", "space-y-80", "space-y-96", "-space-y-0.5", "-space-y-1", "-space-y-1.5", "-space-y-2", "-space-y-2.5", "-space-y-3", "-space-y-3.5", "-space-y-4", "-space-y-5", "-space-y-6", "-space-y-7", "-space-y-8", "-space-y-9", "-space-y-10", "-space-y-11", "-space-y-12", "-space-y-14", "-space-y-16", "-space-y-20", "-space-y-24", "-space-y-28", "-space-y-32", "-space-y-36", "-space-y-40", "-space-y-44", "-space-y-48", "-space-y-52", "-space-y-56", "-space-y-60", "-space-y-64", "-space-y-72", "-space-y-80", "-space-y-96"];
declare type SpaceY = typeof twSpaceYValues[number];
declare const twTopMargins: readonly ["mt-0", "mt-0.5", "mt-1", "mt-1.5", "mt-2", "mt-2.5", "mt-3", "mt-3.5", "mt-4", "mt-5", "mt-6", "mt-7", "mt-8", "mt-9", "mt-10", "mt-11", "mt-12", "mt-14", "mt-16", "mt-20", "mt-24", "mt-28", "mt-32", "mt-36", "mt-40", "mt-44", "mt-48", "mt-52", "mt-56", "mt-60", "mt-64", "mt-72", "mt-80", "mt-96", "-mt-0.5", "-mt-1", "-mt-1.5", "-mt-2", "-mt-2.5", "-mt-3", "-mt-3.5", "-mt-4", "-mt-5", "-mt-6", "-mt-7", "-mt-8", "-mt-9", "-mt-10", "-mt-11", "-mt-12", "-mt-14", "-mt-16", "-mt-20", "-mt-24", "-mt-28", "-mt-32", "-mt-36", "-mt-40", "-mt-44", "-mt-48", "-mt-52", "-mt-56", "-mt-60", "-mt-64", "-mt-72", "-mt-80", "-mt-96"];
declare type MarginTop = typeof twTopMargins[number];
declare const twHeights: readonly ["h-0", "h-0.5", "h-1", "h-1.5", "h-2", "h-2.5", "h-3", "h-3.5", "h-4", "h-5", "h-6", "h-7", "h-8", "h-9", "h-10", "h-11", "h-12", "h-14", "h-16", "h-20", "h-24", "h-28", "h-32", "h-36", "h-40", "h-44", "h-48", "h-52", "h-56", "h-60", "h-64", "h-72", "h-80", "h-96"];
declare type Height = typeof twHeights[number];
declare const twWidths: readonly ["w-0", "w-0.5", "w-1", "w-1.5", "w-2", "w-2.5", "w-3", "w-3.5", "w-4", "w-5", "w-6", "w-7", "w-8", "w-9", "w-10", "w-11", "w-12", "w-14", "w-16", "w-20", "w-24", "w-28", "w-32", "w-36", "w-40", "w-44", "w-48", "w-52", "w-56", "w-60", "w-64", "w-72", "w-80", "w-96"];
declare type Width = typeof twWidths[number];
declare const twGapXValues: readonly ["gap-x-0", "gap-x-0.5", "gap-x-1", "gap-x-1.5", "gap-x-2", "gap-x-2.5", "gap-x-3", "gap-x-3.5", "gap-x-4", "gap-x-5", "gap-x-6", "gap-x-7", "gap-x-8", "gap-x-9", "gap-x-10", "gap-x-11", "gap-x-12", "gap-x-14", "gap-x-16", "gap-x-20", "gap-x-24", "gap-x-28", "gap-x-32", "gap-x-36", "gap-x-40", "gap-x-44", "gap-x-48", "gap-x-52", "gap-x-56", "gap-x-60", "gap-x-64", "gap-x-72", "gap-x-80", "gap-x-96"];
declare type GapX = typeof twGapXValues[number];
declare const twGapYValues: readonly ["gap-y-0", "gap-y-0.5", "gap-y-1", "gap-y-1.5", "gap-y-2", "gap-y-2.5", "gap-y-3", "gap-y-3.5", "gap-y-4", "gap-y-5", "gap-y-6", "gap-y-7", "gap-y-8", "gap-y-9", "gap-y-10", "gap-y-11", "gap-y-12", "gap-y-14", "gap-y-16", "gap-y-20", "gap-y-24", "gap-y-28", "gap-y-32", "gap-y-36", "gap-y-40", "gap-y-44", "gap-y-48", "gap-y-52", "gap-y-56", "gap-y-60", "gap-y-64", "gap-y-72", "gap-y-80", "gap-y-96"];
declare type GapY = typeof twGapYValues[number];

interface BaseChartProps {
    data: any[];
    categories: string[];
    dataKey: string;
    colors?: Color[];
    valueFormatter?: ValueFormatter;
    startEndOnly?: boolean;
    showXAxis?: boolean;
    showYAxis?: boolean;
    yAxisWidth?: Width;
    showAnimation?: boolean;
    showTooltip?: boolean;
    showGradient?: boolean;
    showLegend?: boolean;
    showGridLines?: boolean;
    height?: Height;
    marginTop?: MarginTop;
    autoMinValue?: boolean;
    minValue?: number;
    maxValue?: number;
}

interface AreaChartProps extends BaseChartProps {
    stack?: boolean;
}
declare const AreaChart: ({ data, categories, dataKey, stack, colors, valueFormatter, startEndOnly, showXAxis, showYAxis, yAxisWidth, showAnimation, showTooltip, showLegend, showGridLines, showGradient, height, marginTop, autoMinValue, minValue, maxValue, }: AreaChartProps) => JSX.Element;

interface BarChartProps extends BaseChartProps {
    layout?: "vertical" | "horizontal";
    stack?: boolean;
    relative?: boolean;
}
declare const BarChart: ({ data, categories, dataKey, colors, valueFormatter, layout, stack, relative, startEndOnly, showAnimation, showXAxis, showYAxis, yAxisWidth, showTooltip, showLegend, showGridLines, height, marginTop, autoMinValue, minValue, maxValue, }: BarChartProps) => JSX.Element;

declare const LineChart: ({ data, categories, dataKey, colors, valueFormatter, startEndOnly, showXAxis, showYAxis, yAxisWidth, showAnimation, showTooltip, showLegend, showGridLines, height, marginTop, autoMinValue, minValue, maxValue, }: BaseChartProps) => JSX.Element;

declare type DonutChartVariant = "donut" | "pie";
interface DonutChartProps {
    data: any[];
    category?: string;
    dataKey?: string;
    colors?: Color[];
    variant?: DonutChartVariant;
    valueFormatter?: ValueFormatter;
    label?: string;
    showLabel?: boolean;
    showAnimation?: boolean;
    showTooltip?: boolean;
    height?: Height;
    marginTop?: MarginTop;
}
declare const DonutChart: ({ data, category, dataKey, colors, variant, valueFormatter, label, showLabel, showAnimation, showTooltip, height, marginTop, }: DonutChartProps) => JSX.Element;

interface BadgeProps {
    text: string;
    color?: Color;
    size?: Size;
    icon?: React.ElementType;
    tooltip?: string;
    marginTop?: MarginTop;
}
declare const Badge: ({ text, color, icon, size, tooltip, marginTop, }: BadgeProps) => JSX.Element;

interface BadgeDeltaProps {
    text?: string;
    deltaType?: DeltaType;
    isIncreasePositive?: boolean;
    size?: Size;
    tooltip?: string;
    marginTop?: MarginTop;
}
declare const BadgeDelta: ({ text, deltaType, isIncreasePositive, size, tooltip, marginTop, }: BadgeDeltaProps) => JSX.Element;

interface IconProps {
    icon: React.ElementType;
    variant?: IconVariant;
    tooltip?: string;
    size?: Size;
    color?: Color;
    marginTop?: MarginTop;
}
declare const Icon: ({ icon, variant, tooltip, size, color, marginTop, }: IconProps) => JSX.Element;

interface AccordionProps {
    shadow?: boolean;
    expanded?: boolean;
    marginTop?: MarginTop;
    children: React.ReactElement[] | React.ReactElement;
}
declare const Accordion: ({ shadow, expanded, marginTop, children, }: AccordionProps) => JSX.Element;

interface AccordionBodyProps {
    children: React.ReactNode;
}
declare const AccordionBody: ({ children }: AccordionBodyProps) => JSX.Element;

interface AccordionHeaderProps {
    children: React.ReactNode;
}
declare const AccordionHeader: ({ children }: AccordionHeaderProps) => JSX.Element;

interface AccordionListProps {
    shadow?: boolean;
    marginTop?: MarginTop;
    children: React.ReactElement[] | React.ReactElement;
}
declare const AccordionList: ({ shadow, marginTop, children, }: AccordionListProps) => JSX.Element;

interface ColProps {
    numColSpan?: number;
    numColSpanSm?: number;
    numColSpanMd?: number;
    numColSpanLg?: number;
    children: React.ReactNode;
}
declare const Col: ({ numColSpan, numColSpanSm, numColSpanMd, numColSpanLg, children, }: ColProps) => JSX.Element;

interface ColGridProps {
    numCols?: number;
    numColsSm?: number;
    numColsMd?: number;
    numColsLg?: number;
    gapX?: GapX;
    gapY?: GapY;
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const ColGrid: ({ numCols, numColsSm, numColsMd, numColsLg, gapX, gapY, marginTop, children, }: ColGridProps) => JSX.Element;

interface BlockProps {
    maxWidth?: MaxWidth;
    spaceY?: SpaceY | "";
    textAlignment?: TextAlignment;
    truncate?: boolean;
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const Block: ({ maxWidth, spaceY, textAlignment, truncate, marginTop, children, }: BlockProps) => JSX.Element;

interface CardProps {
    hFull?: boolean;
    maxWidth?: MaxWidth;
    shadow?: boolean;
    decoration?: HorizontalPosition | VerticalPosition | "";
    decorationColor?: Color;
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const Card: ({ hFull, maxWidth, shadow, decoration, decorationColor, marginTop, children, }: CardProps) => JSX.Element;

declare const Divider: () => JSX.Element;

interface FlexProps {
    justifyContent?: JustifyContent;
    alignItems?: AlignItems;
    spaceX?: SpaceX | "";
    truncate?: boolean;
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const Flex: ({ justifyContent, alignItems, spaceX, truncate, marginTop, children, }: FlexProps) => JSX.Element;

interface FooterProps {
    height?: Height;
    children: React.ReactNode;
}
declare const Footer: ({ height, children }: FooterProps) => JSX.Element;

interface ListProps {
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const List: ({ marginTop, children }: ListProps) => JSX.Element;

interface ListItemProps {
    spaceX?: SpaceX | "";
    children: React.ReactNode;
}
declare const ListItem: ({ spaceX, children }: ListItemProps) => JSX.Element;

interface TableProps {
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const Table: ({ marginTop, children }: TableProps) => JSX.Element;

interface TableBodyProps {
    children: React.ReactElement[] | React.ReactElement;
}
declare const TableBody: ({ children }: TableBodyProps) => JSX.Element;

interface TableCellProps {
    textAlignment?: TextAlignment;
    children: React.ReactNode;
}
declare const TableCell: ({ textAlignment, children, }: TableCellProps) => JSX.Element;

interface TableHeadProps {
    children: React.ReactElement[] | React.ReactElement;
}
declare const TableHead: ({ children }: TableHeadProps) => JSX.Element;

interface TableHeaderCellProps {
    textAlignment?: TextAlignment;
    children: React.ReactNode;
}
declare const TableHeaderCell: ({ textAlignment, children, }: TableHeaderCellProps) => JSX.Element;

interface TableRowProps {
    children: React.ReactNode;
}
declare const TableRow: ({ children }: TableRowProps) => JSX.Element;

interface DropdownProps<T> {
    defaultValue?: T;
    value?: T;
    onValueChange?: (value: T) => void;
    handleSelect?: (value: any) => void;
    placeholder?: string;
    icon?: React.ElementType | React.JSXElementConstructor<any>;
    marginTop?: MarginTop;
    maxWidth?: MaxWidth;
    children: React.ReactElement[] | React.ReactElement;
}
declare const Dropdown: <T>({ defaultValue, value, onValueChange, handleSelect, placeholder, icon, marginTop, maxWidth, children, }: DropdownProps<T>) => JSX.Element;

interface DropdownItemProps {
    value: any;
    text: string;
    icon?: React.ElementType;
}
declare const DropdownItem: ({ value, text, icon }: DropdownItemProps) => JSX.Element;

interface MultiSelectBoxProps<T> {
    defaultValues?: any;
    defaultValue?: T[];
    value?: T[];
    onValueChange?: (value: T[]) => void;
    handleSelect?: (values: any[]) => void;
    placeholder?: string;
    icon?: React.ElementType | React.JSXElementConstructor<any>;
    marginTop?: MarginTop;
    maxWidth?: MaxWidth;
    children: React.ReactElement[] | React.ReactElement;
}
declare const MultiSelectBox: <T>({ defaultValues, defaultValue, value, onValueChange, handleSelect, placeholder, icon, marginTop, maxWidth, children, }: MultiSelectBoxProps<T>) => JSX.Element;

interface MultiSelectBoxItemProps {
    value: any;
    text: string;
}
declare const MultiSelectBoxItem: ({ value, text }: MultiSelectBoxItemProps) => JSX.Element;

interface SelectBoxProps<T> {
    defaultValue?: T;
    value?: T;
    onValueChange?: (value: T) => void;
    handleSelect?: (value: any) => void;
    placeholder?: string;
    icon?: React.ElementType | React.JSXElementConstructor<any>;
    marginTop?: MarginTop;
    maxWidth?: MaxWidth;
    children: React.ReactElement[] | React.ReactElement;
}
declare const SelectBox: <T>({ defaultValue, value, onValueChange, handleSelect, placeholder, icon, marginTop, maxWidth, children, }: SelectBoxProps<T>) => JSX.Element;

interface SelectBoxItemProps {
    value: any;
    text: string;
    icon?: React.ElementType;
}
declare const SelectBoxItem: ({ value, text, icon }: SelectBoxItemProps) => JSX.Element;

interface TabProps {
    value: any;
    text: string;
    icon?: React.ElementType;
}
declare const Tab: ({ value, text, icon }: TabProps) => JSX.Element;

interface TabListProps<T> {
    defaultValue?: T;
    value?: T;
    onValueChange?: (value: T) => void;
    handleSelect?: (value: any) => void;
    color?: Color;
    marginTop?: MarginTop;
    children: React.ReactElement[] | React.ReactElement;
}
declare const TabList: <T>({ defaultValue, value, onValueChange, handleSelect, color, marginTop, children, }: TabListProps<T>) => JSX.Element;

interface ToggleProps<T> {
    defaultValue?: T;
    value?: T;
    onValueChange?: (value: T) => void;
    handleSelect?: (value: any) => void;
    color?: Color;
    marginTop?: MarginTop;
    children: React.ReactElement[] | React.ReactElement;
}
declare const Toggle: <T>({ defaultValue, value, onValueChange, handleSelect, color, marginTop, children, }: ToggleProps<T>) => JSX.Element;

interface ToggleItemProps {
    value: any;
    text?: string;
    icon?: React.ElementType;
}
declare const ToggleItem: ({ value, text, icon }: ToggleItemProps) => JSX.Element;

interface ButtonProps {
    type?: ButtonType;
    text?: string;
    value?: any;
    icon?: React.ElementType;
    iconPosition?: HorizontalPosition;
    size?: Size;
    color?: Color;
    importance?: Importance;
    variant?: ButtonVariant;
    handleClick?: () => void;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    onSubmit?: React.FormEventHandler<HTMLButtonElement>;
    onReset?: React.FormEventHandler<HTMLButtonElement>;
    marginTop?: MarginTop;
    disabled?: boolean;
    loading?: boolean;
    loadingText?: string;
    children?: React.ReactNode;
}
declare const Button: ({ type, text, value, icon, iconPosition, handleClick, onClick, onSubmit, onReset, size, color, importance, variant, marginTop, disabled, loading, loadingText, children, }: ButtonProps) => JSX.Element;

/**
 * NOTE: The ButtonInline component is deprecated and will be removed in the next major release.
 * Please refer to the variant="light" property of the Button component instead.
 */

interface ButtonInlineProps {
    type?: ButtonType;
    text?: string;
    value?: any;
    icon?: React.ElementType;
    iconPosition?: HorizontalPosition;
    size?: Size;
    color?: Color;
    handleClick?: () => void;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    onSubmit?: React.FormEventHandler<HTMLButtonElement>;
    onReset?: React.FormEventHandler<HTMLButtonElement>;
    marginTop?: MarginTop;
    disabled?: boolean;
    loading?: boolean;
    loadingText?: string;
    children?: React.ReactNode;
}
declare const ButtonInline: ({ type, text, value, icon, iconPosition, handleClick, onClick, onSubmit, onReset, size, color, marginTop, disabled, loading, loadingText, children, }: ButtonInlineProps) => JSX.Element;

/**
 * NOTE: The Datepicker component is deprecated and will be removed in the next major release.
 * Please refer to the DateRangePicker component instead.
 */

interface DatepickerProps {
    handleSelect?: (selectedStartDay: Date, selectedEndDay: Date) => void;
    enableRelativeDates?: boolean;
    defaultRelativeFilterOption?: RelativeFilterOption;
    defaultStartDate?: Date | null;
    defaultEndDate?: Date | null;
    minDate?: Date | null;
    maxDate?: Date | null;
    placeholder?: string;
    color?: Color;
    marginTop?: MarginTop;
    maxWidth?: MaxWidth;
    enableYearPagination?: boolean;
}
declare const Datepicker: ({ handleSelect, enableRelativeDates, defaultRelativeFilterOption, defaultStartDate, defaultEndDate, minDate, maxDate, placeholder, color, marginTop, maxWidth, enableYearPagination, }: DatepickerProps) => JSX.Element;

declare type Locale = typeof enUS;
declare type DateRangePickerValue = [
    (Date | null)?,
    (Date | null)?,
    (string | null)?
];
declare type DateRangePickerOption = {
    value: string;
    text: string;
    startDate: Date;
    endDate?: Date;
};
interface DateRangePickerProps {
    value?: DateRangePickerValue;
    defaultValue?: DateRangePickerValue;
    onValueChange?: (value: DateRangePickerValue) => void;
    enableDropdown?: boolean;
    options?: DateRangePickerOption[];
    minDate?: Date | null;
    maxDate?: Date | null;
    placeholder?: string;
    dropdownPlaceholder?: string;
    enableYearPagination?: boolean;
    color?: Color;
    marginTop?: MarginTop;
    maxWidth?: MaxWidth;
    locale?: Locale;
}
declare const DateRangePicker: ({ value, defaultValue, onValueChange, enableDropdown, options, minDate, maxDate, placeholder, dropdownPlaceholder, color, marginTop, maxWidth, enableYearPagination, locale, }: DateRangePickerProps) => JSX.Element;

interface TextInputProps {
    id?: string;
    name?: string;
    defaultValue?: string;
    value?: string;
    onChange?: React.ChangeEventHandler<HTMLInputElement>;
    placeholder?: string;
    icon?: React.ElementType | React.JSXElementConstructor<any>;
    error?: boolean;
    errorMessage?: string;
    disabled?: boolean;
    maxWidth?: MaxWidth;
    marginTop?: MarginTop;
}
declare const TextInput: ({ id, name, defaultValue, value, onChange, placeholder, icon, error, errorMessage, disabled, maxWidth, marginTop, }: TextInputProps) => JSX.Element;

interface BoldProps {
    children: React.ReactNode;
}
declare const Bold: ({ children }: BoldProps) => JSX.Element;

interface ItalicProps {
    children: React.ReactNode;
}
declare const Italic: ({ children }: ItalicProps) => JSX.Element;

interface MetricProps {
    color?: Color;
    textAlignment?: TextAlignment;
    truncate?: boolean;
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const Metric: ({ color, textAlignment, truncate, marginTop, children, }: MetricProps) => JSX.Element;

interface SubtitleProps {
    color?: Color;
    truncate?: boolean;
    textAlignment?: TextAlignment;
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const Subtitle: ({ color, truncate, textAlignment, marginTop, children, }: SubtitleProps) => JSX.Element;

interface TextProps {
    color?: Color;
    textAlignment?: TextAlignment;
    truncate?: boolean;
    height?: Height | "";
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const Text: ({ color, textAlignment, truncate, height, marginTop, children, }: TextProps) => JSX.Element;

interface TitleProps {
    color?: Color;
    truncate?: boolean;
    textAlignment?: TextAlignment;
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const Title: ({ color, truncate, textAlignment, marginTop, children, }: TitleProps) => JSX.Element;

interface CalloutProps {
    title: string;
    text: string;
    icon?: React.ElementType;
    color?: Color;
    height?: Height | "";
    marginTop?: MarginTop;
}
declare const Callout: ({ title, text, icon, color, height, marginTop, }: CalloutProps) => JSX.Element;

interface LegendProps {
    categories: string[];
    colors?: Color[];
    marginTop?: MarginTop;
}
declare const Legend: ({ categories, colors, marginTop, }: LegendProps) => JSX.Element;

interface CategoryBarProps {
    categoryPercentageValues: number[];
    colors?: Color[];
    percentageValue?: number;
    showLabels?: boolean;
    tooltip?: string;
    showAnimation?: boolean;
    marginTop?: MarginTop;
}
declare const CategoryBar: ({ categoryPercentageValues, colors, percentageValue, showLabels, tooltip, showAnimation, marginTop, }: CategoryBarProps) => JSX.Element;

interface DeltaBarProps {
    percentageValue: number;
    isIncreasePositive?: boolean;
    tooltip?: string;
    showAnimation?: boolean;
    marginTop?: MarginTop;
}
declare const DeltaBar: ({ percentageValue, isIncreasePositive, tooltip, showAnimation, marginTop, }: DeltaBarProps) => JSX.Element;

interface MarkerBarProps {
    percentageValue: number;
    color?: Color;
    tooltip?: string;
    showAnimation?: boolean;
    marginTop?: MarginTop;
}
declare const MarkerBar: ({ percentageValue, color, tooltip, showAnimation, marginTop, }: MarkerBarProps) => JSX.Element;

interface ProgressBarProps {
    percentageValue: number;
    label?: string;
    tooltip?: string;
    showAnimation?: boolean;
    color?: Color;
    marginTop?: MarginTop;
}
declare const ProgressBar: ({ percentageValue, label, tooltip, showAnimation, color, marginTop, }: ProgressBarProps) => JSX.Element;

interface RangeBarProps {
    percentageValue: number;
    minPercentageValue: number;
    maxPercentageValue: number;
    markerTooltip?: string;
    rangeTooltip?: string;
    showAnimation?: boolean;
    color?: Color;
    marginTop?: MarginTop;
}
declare const RangeBar: ({ percentageValue, minPercentageValue, maxPercentageValue, markerTooltip, rangeTooltip, showAnimation, color, marginTop, }: RangeBarProps) => JSX.Element;

declare type BarListData = {
    key?: string;
    value: number;
    name: string;
    icon?: React.ElementType;
    href?: string;
};
interface BarListProps {
    data: BarListData[];
    valueFormatter?: ValueFormatter;
    color?: Color;
    showAnimation?: boolean;
    marginTop?: MarginTop;
}
declare const BarList: ({ data, color, valueFormatter, showAnimation, marginTop, }: BarListProps) => JSX.Element;

interface TrackingProps {
    marginTop?: MarginTop;
    children: React.ReactNode;
}
declare const Tracking: ({ marginTop, children }: TrackingProps) => JSX.Element;

interface TrackingBlockProps {
    color: Color;
    height?: Height;
    tooltip?: string;
}
declare const TrackingBlock: ({ color, height, tooltip, }: TrackingBlockProps) => JSX.Element;

export { Accordion, AccordionBody, AccordionHeader, AccordionList, AlignItems, AreaChart, Badge, BadgeDelta, BarChart, BarList, Block, Bold, Button, ButtonInline, ButtonType, ButtonVariant, Callout, Card, CategoryBar, Col, ColGrid, Color, DateRangePicker, DateRangePickerValue, Datepicker, DeltaBar, DeltaType, Divider, DonutChart, Dropdown, DropdownItem, Flex, Footer, GapX, GapY, Height, HorizontalPosition, Icon, IconVariant, Importance, Italic, JustifyContent, Legend, LineChart, List, ListItem, MarginTop, MarkerBar, MaxWidth, Metric, MultiSelectBox, MultiSelectBoxItem, ProgressBar, RangeBar, RelativeFilterOption, SelectBox, SelectBoxItem, Size, SpaceX, SpaceY, Subtitle, Tab, TabList, Table, TableBody, TableCell, TableHead, TableHeaderCell, TableRow, Text, TextAlignment, TextInput, Title, Toggle, ToggleItem, Tracking, TrackingBlock, ValueFormatter, VerticalPosition, Width };
